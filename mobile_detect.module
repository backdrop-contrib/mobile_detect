<?php

/**
 * @file
 * Lightweight mobile detection based on the Mobile_Detect.php library.
 */

/**
 * Implements hook_registry_files_alter().
 *
 * Adds the Mobile_Detect() class to the registry so that autoloading works.
 * See http://drupal.stackexchange.com/questions/42266 for a discussion.
 */
function mobile_detect_registry_files_alter(&$files, $modules) {
  $library_path = _mobile_detect_get_library_path();

  $files[$library_path . '/Mobile_Detect.php'] = array(
    'module' => 'mobile_detect',
    'weight' => 0,
  );
}

/**
 * Getter function to retrieve a Mobile_Detect() singleton.
 *
 * @return object
 * Instance of Mobile_Detect(), NULL if failure.
 */
function mobile_detect_get_object() {
  $detect = &backdrop_static(__FUNCTION__);

  if (!isset($detect)) {
    if (class_exists('Mobile_Detect')) {
      try {
        $detect = new Mobile_Detect();
      }
      catch (Exception $e) {
        $detect = NULL;
        watchdog('mobile_detect', 'Could not instantiate Mobile_Detect(): %message',
          array('%message' => $e->getMessage()), WATCHDOG_ALERT);
      }
    }
    else {
      $detect = NULL;
      watchdog('mobile_detect', 'Mobile_Detect() class does not exist', array(), WATCHDOG_ALERT);
    }
  }

  return $detect;
}

/**
 * Predicate function to test a device type.
 *
 * This is intended to be used when the check could be based on user input.
 * The $type argument is checked against the list of valid types.  If the $type
 * is not a valid choice, an error is logged and FALSE is returned.  Otherwise
 * the test is run and returned.
 *
 * @param string $type
 * The type to check.
 *
 * @return boolean
 * The result of the test; FALSE if the test name was invalid.
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function mobile_detect_check_type($type) {
  $detect = mobile_detect_get_object();
  $rules = array('Mobile', 'Tablet', 'Handheld') + $detect->getRules();
  $name = preg_replace('/^is/', '', $type);

  if (!in_array($name, $rules)) {
    watchdog('mobile_detect', 'Illegal access rule: %type',
      array('%type' => $type), WATCHDOG_ERROR);
    return FALSE;
  }

  if ($type == 'isHandheld') {
    return $detect->isMobile() && !$detect->isTablet();
  }
  else {
    return $detect->{$type}();
  }
}

/**
 * Retrieve the path to the Mobile_Detect library.
 *
 * @return string
 * Candidate path to the Mobile_Detect library, relative
 * to Backdrop root.
 *
 * @access private
 */
function _mobile_detect_get_library_path() {
  $library_path = backdrop_get_path('module', 'mobile_detect') . '/library';

  return $library_path;
}

/**
 * Implements hook_permission().
 */
function mobile_detect_permission() {
  return array(
    'view mobile detect debug' => array(
      'title' => t('View Mobile Detect Debug'),
      'description' => t('Allows users to view the Mobile Detect debug blocks, etc.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function mobile_detect_block_info() {
  $blocks = array();

  $blocks['mobile_detect_simple_debug'] = array(
    'info' => t('Mobile Detect Simple Debug'),
    'cache' => BACKDROP_NO_CACHE,
  );

  $blocks['mobile_detect_full_debug'] = array(
    'info' => t('Mobile Detect Full Debug'),
    'cache' => BACKDROP_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mobile_detect_block_view($delta) {
  $block = array();

  if (user_access('view mobile detect debug')) {
    switch ($delta) {
      case 'mobile_detect_simple_debug':
        $block['subject'] = t('Mobile Detect: Simple debug');
        $block['content'] = array(
          '#markup' => _mobile_detect_simple_debug(),
        );
        break;

      case 'mobile_detect_full_debug':
        $block['subject'] = t('Mobile Detect: Full debug');
        $block['content'] = array(
          '#markup' => _mobile_detect_full_debug(),
        );
        break;
    }
  }

  return $block;
}

/**
 * Content generator for hook_block_view('mobile_detect_simple_debug')
 */
function _mobile_detect_simple_debug() {
  $true = t('true');
  $false = t('false');

  $output = array();

  $output[] = '<dl>';

  $output[] = '<dt>' . t('isMobile') . '</dt>';
  $output[] = '<dd>' . (mobile_detect_check_type('isMobile') ? $true : $false) . '</dd>';

  $output[] = '<dt>' . t('isTablet') . '</dt>';
  $output[] = '<dd>' . (mobile_detect_check_type('isTablet') ? $true : $false) . '</dd>';

  $output[] = '<dt>' . t('isHandheld') . '</dt>';
  $output[] = '<dd>' . (mobile_detect_check_type('isHandheld') ? $true : $false) . '</dd>';

  $output[] = '<dt>' . t('Request Time') . '</dt>';
  $output[] = '<dd>' . REQUEST_TIME . '</dd>';

  $output[] = '</dl>';

  return join('', $output);
}

/**
 * Content generator for hook_block_view('mobile_detect_full_debug')
 */
function _mobile_detect_full_debug() {
  $true = t('true');
  $false = t('false');

  $detect = mobile_detect_get_object();

  $output = array();

  $output[] = '<dl>';

  $output[] = '<dt>' . t('isMobile') . '</dt>';
  $output[] = '<dd>' . (mobile_detect_check_type('isMobile') ? $true : $false) . '</dd>';

  $output[] = '<dt>' . t('isTablet') . '</dt>';
  $output[] = '<dd>' . (mobile_detect_check_type('isTablet') ? $true : $false) . '</dd>';

  $output[] = '<dt>' . t('isHandheld') . '</dt>';
  $output[] = '<dd>' . (mobile_detect_check_type('isHandheld') ? $true : $false) . '</dd>';

  foreach ($detect->getRules() as $name => $unused) {
    $predicate = 'is' . $name;

    $output[] = '<dt>' . t('is@name', array('@name' => $name)) . '</dt>';
    $output[] = '<dd>' . (mobile_detect_check_type($predicate) ? $true : $false) . '</dd>';
  }

  $output[] = '<dt>' . t('Request Time') . '</dt>';
  $output[] = '<dd>' . REQUEST_TIME . '</dd>';

  $output[] = '</dl>';

  return join('', $output);
}
